#Задание 1
Создайте numpy array с элементами от числа N до 0 (например, для N = 10 это будет array([9, 8, 7, 6, 5, 4, 3, 2, 1, 0])).

import numpy as np
n = int(input("n= "))
v =np.arange(0,n)
v = v[::-1]
v

#Задание 2
Создайте диагональную матрицу с элементами от N до 0. Посчитайте сумму ее значений на диагонали.

n = int(input("n= "))
v = np.diag(np.arange(0, n), k=0)
v = v[::-1]
print(v)
summa = np.asarray(v)
print('Cуммa значений на диагонали: ', np.trace(summa))

#Задание 3
Решите систему уравнений:
4x + 2y + z = 4
x + 3y = 12
5y + 4z = -3

from numpy import linalg as LA

a = [[4, 2, 1],
    [1, 3, 0],
    [5, 4, 0]]
b = [4, 12, -3]
x = LA.solve(a, b)
x

#Проверка
np.dot(a, x)


user_1 = np.array([2, 1, 0, 0, 0, 0])
user_2 = np.array([1, 1, 2, 1, 0, 0])
user_3 = np.array([2, 0, 1, 0, 0, 0])
user_4 = np.array([1, 1, 2, 1, 0, 1])
user_5 = np.array([0, 0, 1, 2, 0, 0])
user_6 = np.array([0, 0, 0, 0, 0, 5])
user_7 = np.array([1, 0, 0, 0, 0, 0])
user_8 = np.array([0, 1, 1, 0, 0, 0])
user_9 = np.array([0, 0, 0, 1, 1, 3])
user_10 = np.array([1, 0, 0, 2, 1, 4])
next_user_stats = np.array([0, 1, 2, 0, 0, 0])


next_user_stats = np.array([0, 1, 2, 0, 0, 0])



user_1Length = np.sqrt( (user_1*user_1).sum() )
user_2Length = np.sqrt( (user_2*user_2).sum() )
user_3Length = np.sqrt( (user_3*user_3).sum() )
user_4Length = np.sqrt( (user_4*user_4).sum() )
user_5Length = np.sqrt( (user_5*user_5).sum() )
user_6Length = np.sqrt( (user_6*user_6).sum() )
user_7Length = np.sqrt( (user_7*user_7).sum() )
user_8Length = np.sqrt( (user_8*user_8).sum() )
user_9Length = np.sqrt( (user_9*user_9).sum() )
user_10Length = np.sqrt( (user_10*user_10).sum() )
next_user_statsLength = np.sqrt( (next_user_stats*next_user_stats).sum() )

itog = [cosine( user_1, next_user_stats ),cosine( user_2, next_user_stats ),cosine( user_3, next_user_stats ),cosine( user_4, next_user_stats ), cosine( user_5, next_user_stats ), cosine( user_6, next_user_stats ), cosine( user_7, next_user_stats ),cosine( user_8, next_user_stats ),cosine( user_9, next_user_stats ), cosine( user_10, next_user_stats )]
pr1 = min(itog , key=lambda x: (abs(x - 1), x))
pr2 =min(enumerate(itog), key=lambda x: abs(x[1]))[0]
print('Самый похожий пользователь user_', itog.index(pr) + 1, 'user_', pr2)